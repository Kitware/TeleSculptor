MAP-Tk v0.11.0 Release Notes
============================

This is a minor release of MAP-Tk that provides both new functionality and
fixes over the previous v0.10.0 release.


Updates since v0.10.0
--------------------

Overall

 * Removed all uses of VITAL_FOREACH, which has been removed from KWIVER,
   and replace with standard C++11 range-based for loops.

 * Updated everything to use the new feature_track_set class and
   feature_track_state class from KWIVER.  The previous data structure,
   track_set is now a base class and is generalized to support other types of
   tracks, like moving object tracks.

 * Replaced use of the geo_map vital algorithm with the new geodetic conversion
   functions and data structures provided in KWIVER.  The new approach still
   uses plugins (e.g. PROJ4) but only supports one backend at a time that is
   globally accessible throughout KWIVER.  There is no more need to explicitly
   pass a geo_map object around.  New data structures, like geo_point, know
   how to convert themselves into different coordinate systems.

MAP-Tk Library

 * modified extract_feature_colors API to accept a feature_track_set by
   shared_ptr, modify to tracks in-place, and return the same modifed
   feature_track_set.  It also uses the new track_set API to more quickly
   find track state on a frame and avoids destroying the frame index if
   one is used in the track_set.

 * Moved local_geo_cs class into KWIVER and updated TeleSculptor to used the
   KWIVER version.

Plugins

 * Moved the Blender and SketchUp plugins out of the scripts directory and
   into a top-level plugins directory, added a README, and configured these
   files to be installed.

 * The SketchUp plugin now supports older version of SketchUp
   (back to version 8) and only attempts to load frames which have both an
   image file and camera file available in the project.

TeleSculptor

 * Updated the TeleSculptor application to build against VTK 8.0 instead of
   VTK 6.2.  This upgrade provides substantial improvements to rendering
   speed of large data sets.

 * Changed frame indexing to be one-based rather than zero-based.  This change
   was needed since the new streaming video API used in the tracking tools now
   produces frames with one-based indexing.  Track files produced with older
   versions that had zero-based indexing are detected and frame numbers are
   shifted by one.

 * Video files can now be open directly or via a config file into TeleSculptor
   for viewing and processing.

 * Added the concept of a "Project", which is essentially a configuration file
   in a working directory in which algorithms can write results.  The user
   must now create or open a project before running an algorithms.

 * TeleSculptor now depends on Sprokit from KWIVER and adds a new Sprokit
   powered compute tool compute feature tracks using the new KLT feature
   tracker in KWIVER.  The tool also detects key frames in video and uses
   ORB feature detection and matching on the keyframes with bag of words
   frame matching for loop closure.

 * A new tool is available in the compute menu to compute a dense depth
   map on the current frame.  THis uses the new Super3D algorithms in KWIVER.

 * TeleSculptor now supports logging with log4cplus.

 * If an input video has KLV metadata (0601 or 0104) TeleSculptor will now
   parse that metadata and use it to construct initial camera models.  It will
   also use the metadata to set a geographic origin for the project, which is
   written to the project directory.

 * TeleSculptor now has a pair of new tools in the Compute menu to save out
   either keyframes or all frames of video to image files.

 * TeleSculptor now uses a common convention for naming all output files
   supporting a frame of video.  If the input is an image list it uses the
   source image names, if a video it uses video name plus frame number.

 * TeleSculptor now has a new tool for triangulating landmarks.  This is
   useful when cameras are provided (e.g. from metadata), but landmarks are
   not.

 * TeleSculptor now supports loading and processing videos with increasing
   but non contiguous frame numbers.  This may occur when loading a video
   at a reduced frame rate.

 * TeleSculptor now has an option to display only keyframes when playing
   back a video.

 * The compute menu has been rearranged and now has an "Advanced" submenu
   containing tool that are less stable or less commonly used.

 * The loop over video frames to extract metadata for camera initialization now
   occurs in a separate thread. This allows the user to interact with the GUI
   and view the video while the camera initialization occurs.

 * The slideshow delay slider has been replaced by a speed slider that controls
   the slideshow playback speed. When the slider is to the far left, slideshow
   speed is 0.25Hz and when to the far right, the slideshow plays without any
   delay between frames.

 * Added separate visibility and color options for display of feature tracks
   that have descriptors and those that do not have descriptors.  This allows
   for visual distinction between KLT tracks (without descriptors) on each
   frame of video and ORB, or similar, tracks (with descriptors) on keyframes.

 * Added a progress bar that appears below the World View to show progress when
   tools are running.  It can also display a status message.

 * Added CMake superbuild to automatically pull and build a specified version of all
   the necessary libraries from Fletch and KWIVER. This allows MAP-Tk to be fully built
   from a single build, rather than having to manually build and connect multiple builds.
   The superbuild does still allow using a manually built KWIVER/Fletch if so desired.

 * Updated TeleSculptor to use Qt version 5.10 instead of 4.8.  This also
   enables the OpenGL2 backend in VTK 8.0 which provides faster rendering.
   Qt5 now requires Python to build, so we are also requiring Python for
   the superbuild, which enables Python in KWIVER.  We are not yet taking
   advantage of KWIVER Python bindings in TeleSculptor, but may in the future.

 * Added ability to interactively add and edit a region of interest in the
   world view.

 * Added ability to specify image masks.  Currently these are supported by
   dense feature tracking.

 * Added ability to place and edit ground control points that are synchronized
   across the world and camera views. The points can be exported to a PLY file
   and get imported using the standard import project infrastructure.

 * Double-clicking the mouse pointer in the WorldView allows to set the center
   of rotation of the view camera about the nearest picked point in the view.

 * Refactored the code to remove the ReconstructionData class that was left
   over from when surface extraction was part of a separate repository.

 * Added metrics for rms error by camera and a check that the rays meeting at a
   point have some minimum angle.
 
 * Moved loop closure out of sprokit pipeline to improve speed.


Fixes since v0.10.0
------------------

Installer

 * Fixed an issue where required data files for PROJ were not installed.
   This also requires TeleSculptor and the command line tools to set an
   environment variable to tell PROJ where the data is installed.

TeleSculptor

 * TeleSculptor now catches more algorithm exceptions and turns them into
   warning messages rather than letting the application crash.

 * The functionality to color mesh surfaces was broken when TeleSculptor
   switched to using the video_input API to load all imagery.  This code
   has now been fixed to work with video_input.  It now works as it did
   before.  It also no longer requires camera files to loaded again from
   KRTD files and instead uses the in memory cameras.

Tests

 * All of the unit tests in v0.10.0 were testing functions that had moved
   into KWIVER.  Those tests had also been duplicated in KWIVER, so the
   redundant tests in MAP-Tk were removed.  This leaves MAP-Tk with no tests.
   New tests, especially for the command line tools, should be added in the
   future.
