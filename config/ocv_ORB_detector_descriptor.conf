# Parameters for the OpenCV ORB feature detector and descriptor extractor.
# Currently parameters are duplicated between the detector and extractor
# so this file contains a single copy that is reused for both.


# Use the OpenCV ORB feature detector/descriptor
type = ocv_ORB

# This is size of the border where the features are not detected. It should
# roughly match the patch_size parameter.
ocv_ORB:edge_threshold = 31

# Undocumented
ocv_ORB:fast_threshold = 20

# It should be 0 in the current implementation.
ocv_ORB:first_level = 0

# The maximum number of features to retain
ocv_ORB:n_features = 500

# The number of pyramid levels. The smallest level will have linear size
# equal to input_image_linear_size/pow(scale_factor, n_levels).
ocv_ORB:n_levels = 8

# Size of the patch used by the oriented BRIEF descriptor. Of course, on
# smaller pyramid layers the perceived image area covered by a feature will
# be larger.
ocv_ORB:patch_size = 31

# Pyramid decimation ratio, greater than 1. scaleFactor==2 means the
# classical pyramid, where each next level has 4x less pixels than the
# previous, but such a big scale factor will degrade feature matching scores
# dramatically. On the other hand, too close to 1 scale factor will mean
# that to cover certain scale range you will need more pyramid levels and so
# the speed will suffer.
ocv_ORB:scale_factor = 1.2

# The default HARRIS_SCORE (value=0) means that Harris algorithm is used to
# rank features (the score is written to KeyPoint::score and is used to
# retain best n_features features); FAST_SCORE (value=1) is alternative
# value of the parameter that produces slightly less stable key-points, but
# it is a little faster to compute.
ocv_ORB:score_type = 0

# The number of points that produce each element of the oriented BRIEF
# descriptor. The default value 2 means the BRIEF where we take a random
# point pair and compare their brightnesses, so we get 0/1 response. Other
# possible values are 3 and 4. For example, 3 means that we take 3 random
# points (of course, those point coordinates are random, but they are
# generated from the pre-defined seed, so each element of BRIEF descriptor
# is computed deterministically from the pixel rectangle), find point of
# maximum brightness and output index of the winner (0, 1 or 2). Such output
# will occupy 2 bits, and therefore it will need a special variant of
# Hamming distance, denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4,
# we take 4 random points to compute each bin (that will also occupy 2 bits
# with possible values 0, 1, 2 or 3).
ocv_ORB:wta_k = 2
